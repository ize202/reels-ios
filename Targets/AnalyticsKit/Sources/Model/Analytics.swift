//
//  Analytics.swift
//  AnalyticsKit (Generated by SwiftyLaunch 2.0)
//  https://docs.swiftylaun.ch/module/analyticskit
//
//  Use the Analytics class in order to track app events and errors.
//  You don't have to keep it stateful, simply use it by calling Analytics.ANALYTICS_METHOD
//

import Foundation
import SharedKit
import Mixpanel

/// Defines the type of the event.
///
/// The event type will be prefixed before every outgoing event.
public enum EventType: String {
	case error = "error"
	case info = "info"
	case success = "success"
}

/// Defines the relevancy of an event.
///
/// All events have medium relevancy by default, except 'error', which has a
/// high relevancy by default.
public enum EventRelevancy: String {
	case low = "low"
	case medium = "medium"
	case high = "high"
}

/// Defines the event source, or the "category" of the event
///
/// SwiftyLaunch has created the most common event sources for its modules, but
/// don't be afraid to extend this enum.
public enum EventSource: String {
	/// Catch-all event source for events don't fit into any other category. Be sure to create a distinct source where needed
	case general = "general"

	/// For events that are related to AuthKit / Supabase Auth
	case auth = "auth"

	/// For events that are related to DB interactions / Supabase DB
	case db = "db"

	/// For events that are related to In-App Purchases / RevenueCat
	case iap = "iap"

	/// For events that are related to Push Notifications / OneSignal
	case notif = "notif"

	/// For events that are related to AnalyticsKit itself / Mixpanel
	case analytics = "analytics"
}

/// A type that represents an analytics event.
public protocol AnalyticsEvent {
	/// The name of the event.
	var name: String { get }
	/// The properties of the event.
	var properties: [String: Any] { get }
}

/// A type that represents an analytics event with a screen name.
public protocol AnalyticsScreenEvent: AnalyticsEvent {
	/// The name of the screen.
	var screenName: String { get }
}

/// A type that represents an analytics event with a button name.
public protocol AnalyticsButtonEvent: AnalyticsEvent {
	/// The name of the button.
	var buttonName: String { get }
}

/// A type that represents an analytics event with a user ID.
public protocol AnalyticsUserEvent: AnalyticsEvent {
	/// The ID of the user.
	var userId: String { get }
}

/// A type that represents an analytics event with a value.
public protocol AnalyticsValueEvent: AnalyticsEvent {
	/// The value of the event.
	var value: Double { get }
}

/// A type that represents an analytics event with a duration.
public protocol AnalyticsDurationEvent: AnalyticsEvent {
	/// The duration of the event.
	var duration: TimeInterval { get }
}

/// A type that represents an analytics event with an error.
public protocol AnalyticsErrorEvent: AnalyticsEvent {
	/// The error that occurred.
	var error: Error { get }
}

/// For events that are related to AnalyticsKit itself / Mixpanel
public enum AnalyticsKitEvent: AnalyticsEvent {
	case userIdentified(id: String)
	case userReset

	public var name: String {
		switch self {
		case .userIdentified: return "user_identified"
		case .userReset: return "user_reset"
		}
	}

	public var properties: [String: Any] {
		switch self {
		case .userIdentified(let id):
			return ["user_id": id]
		case .userReset:
			return [:]
		}
	}
}

/// Wrapper around the Mixpanel SDK
public enum Analytics {
	/// Capture an event and send it to Mixpanel.
	/// - Parameter event: The event to capture.
	public static func capture(_ event: AnalyticsEvent) {
		/// A wrapper of the "flexible" version that takes in raw input and sends it to Mixpanel.
		/// - Parameters:
		///   - event: The name of the event.
		///   - properties: The properties of the event.
		func captureRaw(_ event: String, properties: [String: Any]) {
			var propertiesToSend = properties

			// Add screen name if available
			if let screenEvent = event as? AnalyticsScreenEvent {
				propertiesToSend["screen_name"] = screenEvent.screenName
			}

			// Add button name if available
			if let buttonEvent = event as? AnalyticsButtonEvent {
				propertiesToSend["button_name"] = buttonEvent.buttonName
			}

			// Add user ID if available
			if let userEvent = event as? AnalyticsUserEvent {
				propertiesToSend["user_id"] = userEvent.userId
			}

			// Add value if available
			if let valueEvent = event as? AnalyticsValueEvent {
				propertiesToSend["value"] = valueEvent.value
			}

			// Add duration if available
			if let durationEvent = event as? AnalyticsDurationEvent {
				propertiesToSend["duration"] = durationEvent.duration
			}

			// Add error if available
			if let errorEvent = event as? AnalyticsErrorEvent {
				propertiesToSend["error"] = errorEvent.error.localizedDescription
			}

			Mixpanel.mainInstance().track(event: event.name, properties: propertiesToSend)
		}

		captureRaw(event.name, properties: event.properties)
	}

	/// Is only used once in App.swift to initialize Mixpanel.
	static public func initMixpanel() {
		guard let token = try? getPlistEntry("MIXPANEL_TOKEN", in: "Mixpanel-Info"), !token.isEmpty else {
			fatalError("ERROR: Couldn't find MIXPANEL_TOKEN in Mixpanel-Info.plist!")
		}

		Mixpanel.initialize(token: token)
		
		// Enable automatic screen tracking
		Mixpanel.mainInstance().trackAutomaticEvents = true
	}

	/// Identifies a user in Mixpanel
	/// - Parameters:
	///   - id: The ID of the user.
	///   - userProperties: The properties of the user.
	static public func identify(id: String, userProperties: [String: Any] = [:]) {
		Mixpanel.mainInstance().identify(distinctId: id)
		if !userProperties.isEmpty {
			Mixpanel.mainInstance().people.set(properties: userProperties)
		}
		
		capture(AnalyticsKitEvent.userIdentified(id: id))
		
		Logger.info(
			id: "connected_user_between_auth_and_mixpanel",
			longDescription: "[ANALYTICS<>AUTH] Connected Auth and Mixpanel for User with ID \(id).",
			properties: userProperties
		)
	}

	/// Disconnects Mixpanel ID from Supabase Auth UID
	static public func reset() {
		Mixpanel.mainInstance().reset()
		capture(AnalyticsKitEvent.userReset)
	}
}

// MARK: - Only for App.swift
extension Analytics {

	// We don't do this inside init of Analytics because we never initialize the Analytics object.
	// Is only used once in App.swift to initialize Mixpanel.
	static public func initMixpanel() {
		guard let token = try? getPlistEntry("MIXPANEL_TOKEN", in: "Mixpanel-Info"), !token.isEmpty else {
			fatalError("ERROR: Couldn't find MIXPANEL_TOKEN in Mixpanel-Info.plist!")
		}

		Mixpanel.initialize(token: token)
		
		// Enable automatic screen tracking
		Mixpanel.mainInstance().trackAutomaticEvents = true
	}

	/// Allows us to connect a user with our Supabase Auth UID
	/// https://docs.swiftylaun.ch/module/analyticskit#actions-when-user-signes-in-or-out-only-with-firebasekit
	static public func associateUserWithID(_ id: String, userProperties: [String: Any]) {
		Mixpanel.mainInstance().identify(distinctId: id)
		if !userProperties.isEmpty {
			Mixpanel.mainInstance().people.set(properties: userProperties)
		}
		
		capture(AnalyticsKitEvent.userIdentified(id: id))
		
		Logger.info(
			id: "connected_user_between_auth_and_mixpanel",
			longDescription: "[ANALYTICS<>AUTH] Connected Auth and Mixpanel for User with ID \(id).",
			properties: userProperties
		)
	}

	/// Disconnects Mixpanel ID from Supabase Auth UID
	static public func removeUserIDAssociation() {
		Mixpanel.mainInstance().reset()
		capture(AnalyticsKitEvent.userReset)
	}

}
