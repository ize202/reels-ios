//
//  Analytics.swift
//  AnalyticsKit (Generated by SwiftyLaunch 2.0)
//  https://docs.swiftylaun.ch/module/analyticskit
//
//  Use the Analytics class in order to track app events and errors.
//  You don't have to keep it stateful, simply use it by calling Analytics.ANALYTICS_METHOD
//

import Foundation
import Mixpanel
import SharedKit

/// Defines the type of the event.
///
/// The event type will be prefixed before every outgoing event.
public enum EventType: String {
    case error = "error"
    case info = "info"
    case success = "success"
}

/// Defines the relevancy of an event.
///
/// All events have medium relevancy by default, except 'error', which has a
/// high relevancy by default.
public enum EventRelevancy: String {
    case low = "low"
    case medium = "medium"
    case high = "high"
}

/// Defines the event source, or the "category" of the event
///
/// SwiftyLaunch has created the most common event sources for its modules, but
/// don't be afraid to extend this enum.
public enum EventSource: String {
    /// Catch-all event source for events don't fit into any other category. Be sure to create a distinct source where needed
    case general = "general"

    /// For events that are related to AuthKit / Supabase Auth
    case auth = "auth"

    /// For events that are related to DB interactions / Supabase DB
    case db = "db"

    /// For events that are related to AnalyticsKit itself / PostHog
    case analytics = "analytics"
}

/// Wrapper around the Mixpanel SDK
public class Analytics {

    /// Initialize Mixpanel
    static public func initMixpanel() {
        guard let token = try? getPlistEntry("MIXPANEL_TOKEN", in: "Mixpanel-Info"), !token.isEmpty else {
            fatalError("ERROR: Couldn't find MIXPANEL_TOKEN in Mixpanel-Info.plist!")
        }

        Mixpanel.initialize(token: token, trackAutomaticEvents: false)
    }

    /// Capture an event and send it to Mixpanel.
    static public func capture(
        _ eventType: EventType,
        id: String,
        longDescription: String? = nil,
        source: EventSource,
        fromView: String? = nil,
        relevancy: EventRelevancy? = nil
    ) {
        // To get an overview of what's being captured, we print it into the console
        print(
            "[ANALYTICS] Captured \(eventType.rawValue) event '\(id)' of type '\(source.rawValue)': \(longDescription ?? "No description")"
        )

        var properties: Properties = [
            "relevancy": relevancy != nil
                ? relevancy!.rawValue
                : eventType == .error ? EventRelevancy.high.rawValue : EventRelevancy.medium.rawValue,
            "source": source.rawValue
        ]

        if let longDescription = longDescription {
            properties["long_description"] = longDescription
        }

        if let fromView = fromView {
            properties["screen_name"] = fromView
        }

        Analytics.captureEvent("\(eventType.rawValue)_\(id)", properties: properties)
    }

    /// Capture an event and send it to Mixpanel.
    static public func captureEvent(_ event: String, properties: Properties?) {
        let propertiesToSend = properties ?? Properties()
        Mixpanel.mainInstance().track(event: event, properties: propertiesToSend)
    }

    /// Is called from the .captureTaps() view modifier (https://docs.swiftylaun.ch/module/analyticskit/capture-taps) , but we
    /// can also manually send these events with this function.
    static public func captureTap(
        _ tapTargetId: String,
        fromView screenName: String?,
        relevancy: EventRelevancy = .medium
    ) {
        print("[ANALYTICS] Captured tap on \(tapTargetId)")

        var properties: Properties = ["relevancy": relevancy.rawValue]
        if let screenName = screenName {
            properties["screen_name"] = screenName
        }

        Analytics.captureEvent("user_tapped_on_\(tapTargetId)", properties: properties)
    }

    /// Allows us to connect a user with our Supabase Auth UID
    /// https://docs.swiftylaun.ch/module/analyticskit#actions-when-user-signes-in-or-out-only-with-firebasekit
    static public func associateUserWithID(_ id: String, userProperties: Properties) {
        Mixpanel.mainInstance().identify(distinctId: id)
        Mixpanel.mainInstance().people.set(properties: userProperties)
        Analytics.capture(
            .info,
            id: "connected_user_between_auth_and_mixpanel",
            longDescription: "[ANALYTICS<>AUTH] Connected Auth and Mixpanel for User with ID \(id).",
            source: .analytics
        )
    }

    /// Disconnects Mixpanel ID from Supabase Auth UID
    static public func removeUserIDAssociation() {
        Mixpanel.mainInstance().reset()
    }

}
