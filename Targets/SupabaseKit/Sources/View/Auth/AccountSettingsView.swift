//
//  AccountSettingsView.swift
//  SupabaseKit (Generated by SwiftyLaunch 2.0)
//  https://docs.swiftylaun.ch/module/authkit/account-settings
//

import AnalyticsKit
import AuthenticationServices
import SharedKit
import SwiftUI

private enum ActiveSlideOverCard: Identifiable {
	case reauthAccountDeletion
	// case updateName // Removed as we use a standard sheet now
	// case changeEmail // Removed
	var id: Self {
		return self
	}
}

public struct SupabaseAccountSettingsView: View {

	@EnvironmentObject var db: DB
	@State private var showSignoutDialog = false
	@State private var showAccountDeleteDialog = false
	
	// State for Update Display Name sheet
	@State private var showUpdateNameSheet = false
	@State private var newDisplayName: String = ""
	// Removed email state

	@State private var shownSlideOverCard: ActiveSlideOverCard? = nil

	private let popBackToSettings: () -> Void

	public init(popBackToRoot: @escaping () -> Void) {
		self.popBackToSettings = popBackToRoot
	}

	public var body: some View {
		List {
			VStack(alignment: .center, spacing: 4) { // Reduced spacing
				
				// Display Name (Full Name or Email)
				let fullName = db.currentUser?.userMetadata["full_name"] as? String
				let email = db.currentUser?.email
				let primaryText = fullName ?? email ?? "Account"
				
				Text(primaryText)
					.font(.title2) // Slightly smaller title
					.fontWeight(.semibold)
					.lineLimit(1)
				
				// Display Email if different from Primary Text
				if let displayedName = fullName, // Check if full name was displayed
				   let validEmail = email, !validEmail.isEmpty, // Check if email exists
				   displayedName != validEmail { // Check if email is different
					Text(validEmail)
						.font(.subheadline)
						.foregroundColor(.secondary)
				}
			}
			.frame(maxWidth: .infinity)
			.listRowBackground(Color(UIColor.systemGroupedBackground))
			.padding(.vertical, 10) // Add some padding

			// Section for Account Updates
			Section("Account Management") {
				Button("Update Display Name") {
					Analytics.captureTap(
						"update_display_name_btn", fromView: "AccountSettingsView", relevancy: .medium)
					// Set the initial value for the text field
					newDisplayName = db.currentUser?.userMetadata["full_name"] as? String ?? ""
					showUpdateNameSheet = true
				}
				// Removed Change Email Button
			}

			Section("Danger Zone") { // Group destructive actions

				Button("Delete Account", role: .destructive) {
					Analytics.captureTap(
						"delete_account_btn", fromView: "AccountSettingsView", relevancy: .high)
					showAccountDeleteDialog = true
				}
				.confirmationDialog(
					"Are you sure you want to delete your Account?", isPresented: $showAccountDeleteDialog
				) {
					Button("Confirm Account Deletion", role: .destructive) {
						Analytics.captureTap(
							"confirm_delete_account_btn",
							fromView: "AccountSettingsView (Delete Account Dialog)", relevancy: .high)
						shownSlideOverCard = .reauthAccountDeletion
					}
				}

				Button("Sign Out", role: .destructive) {
					Analytics.captureTap("signout_btn", fromView: "AccountSettingsView")
					showSignoutDialog = true
				}
				.confirmationDialog("Are you sure you want to sign out?", isPresented: $showSignoutDialog) {
					Button("Confirm Sign Out", role: .destructive) {
						Analytics.captureTap(
							"confirm_signout_btn", fromView: "AccountSettingsView (Sign Out Dialog)",
							relevancy: .medium)
						Task {
							await tryFunctionOtherwiseShowInAppNotification(
								fallbackNotificationContent:
									.init(
										title: "Sign Out Error",
										message: "Try Again Later"
									)
							) {
								try await db.signOut()
							}
							popBackToSettings()
						}
					}
				}
			}
		}
		.padding(.top, -20)
		.navigationTitle("Your Account")
		.captureViewActivity(as: "AccountSettingsView")
		.navigationBarTitleDisplayMode(.inline)
		.requireLogin(db: db, onCancel: popBackToSettings)
		.sheet(item: $shownSlideOverCard) { activeCard in
			Group {
				switch activeCard {
					case .reauthAccountDeletion:
						ReAuthSheetView { result in
							switch result {
								case .success:
									Task {
										await tryFunctionOtherwiseShowInAppNotification(
											fallbackNotificationContent: .init(
												title: "Account Deletion Error",
												message: "Try Again Later.")
										) {
											try await Task.sleep(for: .seconds(0.5))
											print("Deleting Account...")
											try await db.deleteAccount()
											popBackToSettings()
										}
									}
									shownSlideOverCard = nil
								case .canceled:
									print("Re-auth canceled")
									shownSlideOverCard = nil
							}
						}
				}
			}
			.padding()
			.interactiveDismissDisabled()
			.presentationDetents([
				.height(380)
			])
			.presentationCornerRadius(35)
		}
		// Add sheet for updating display name
		.sheet(isPresented: $showUpdateNameSheet) {
			UpdateNameSheetView(newDisplayName: $newDisplayName) {
				// Save Action
				Task {
					await updateDisplayName()
				}
			}
		}
	}
	
	// Helper function to update display name (calls the backend function)
	private func updateDisplayName() async {
		await tryFunctionOtherwiseShowInAppNotification(
			fallbackNotificationContent: InAppNotificationContent(title: "Error Updating Name", message: "Please try again."),
			function: {
				try await db.updateDisplayName(newName: newDisplayName)
				showInAppNotification(.success, content: .init(title: "Display Name Updated", message: ""))
				showUpdateNameSheet = false
			}
		)
	}
}

// MARK: - Update Name Sheet View
struct UpdateNameSheetView: View {
	@Binding var newDisplayName: String
	var onSave: () -> Void
	@Environment(\.dismiss) var dismiss
	
	// Add state for field focus
	@FocusState private var isNameFieldFocused: Bool
	
	var body: some View {
		NavigationView {
			ZStack {
				// Background color
				Color.black.edgesIgnoringSafeArea(.all)
				
				VStack(spacing: 24) {
					
					// Name input field
					VStack(alignment: .leading, spacing: 8) {
						TextField("Display Name", text: $newDisplayName)
							.textFieldStyle(.plain)
							.font(.system(size: 17, weight: .regular))
							.foregroundColor(.white)
							.autocorrectionDisabled()
							.textInputAutocapitalization(.words)
							.focused($isNameFieldFocused)
							.padding(.vertical, 12)
							.padding(.horizontal, 16)
							.background(
								RoundedRectangle(cornerRadius: 12)
									.fill(Color(UIColor.systemGray6))
							)
						
						// Character count
						Text("\(newDisplayName.count)/20")
							.font(.caption)
							.foregroundColor(.secondary)
							.padding(.horizontal, 4)
					}
					.padding(.horizontal)
					
					// Save button
					Button(action: {
						hapticFeedback(.light)
						onSave()
					}) {
						Text("Save Changes")
							.font(.system(size: 17, weight: .semibold))
							.frame(maxWidth: .infinity)
							.padding(.vertical, 16)
							.background(
								RoundedRectangle(cornerRadius: 12)
									.fill(Color(hex: "9B79C1")) // Primary color from requirements
							)
							.foregroundColor(.white)
					}
					.disabled(newDisplayName.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty)
					.opacity(newDisplayName.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty ? 0.6 : 1.0)
					.padding(.horizontal)
					
					Spacer()
				}
				.padding(.top, 20)
			}
			.navigationTitle("Update Display Name")
			.navigationBarTitleDisplayMode(.inline)
			.toolbar {
				ToolbarItem(placement: .navigationBarLeading) {
					Button("Cancel") {
						hapticFeedback(.light)
						dismiss()
					}
					.foregroundColor(Color(hex: "9B79C1")) // Primary color
				}
			}
			.onAppear {
				isNameFieldFocused = true
			}
		}
		.preferredColorScheme(.dark)
		.presentationDetents([.height(300)])
		.presentationCornerRadius(20)
	}
	
	// Helper function for haptic feedback
	private func hapticFeedback(_ style: UIImpactFeedbackGenerator.FeedbackStyle) {
		let generator = UIImpactFeedbackGenerator(style: style)
		generator.impactOccurred()
	}
}

// Helper extension for hex colors
extension Color {
	init(hex: String) {
		let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)
		var int: UInt64 = 0
		Scanner(string: hex).scanHexInt64(&int)
		let a, r, g, b: UInt64
		switch hex.count {
		case 3: // RGB (12-bit)
			(a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)
		case 6: // RGB (24-bit)
			(a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)
		case 8: // ARGB (32-bit)
			(a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)
		default:
			(a, r, g, b) = (1, 1, 1, 0)
		}
		self.init(
			.sRGB,
			red: Double(r) / 255,
			green: Double(g) / 255,
			blue: Double(b) / 255,
			opacity: Double(a) / 255
		)
	}
}

#Preview {
	NavigationStack {
		SupabaseAccountSettingsView(popBackToRoot: {})
			.environmentObject(DB())
	}
}
