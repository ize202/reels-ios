---
description: This is the doc for how to use the in app purchase kit powered by revenue cat
globs: 
alwaysApply: false
---
# InAppPurchaseKit Module Overview 
InAppPurchaseKit wraps RevenueCat's SDK to allow for an even easier integration of paywalls and in-app purchases in your app.

After generating a project with InAppPurchaseKit enabled and completing the initial project setup, you will get following features out of the box:

A customizable pre-built paywall: A paywall view that allows you to easily customize it to your liking. Read more.
Ability to lock actions behind a paywall: Lock features behind a paywall and show the paywall when the user tries to access them. Read more.
Ability to lock views behind a paywall: Lock views behind a paywall and show the paywall when the user tries to access them. Read more.
An entry in the app settings screen: A dedicated view in the app settings screen to manage subscriptions and purchases. Read more.
(AnalyticsKit only) Automatic analytics tracking: Automatically track events related to paywalls and purchases. Read more.
(AuthKit only) Ability to use a shared user ID: If the user is signed in, the Firebase user ID is used as the alias ID for RevenueCat. Read more.
(BackendKit only) BackendKit integration: You can also access InAppPurchaseKit information on the backend. Read more.
Module Deep Dive
Initialization and Configuration
We initilize InAppPurchaseKit in App.swift: by calling a static function InAppPurchases.initRevenueCat()
Only when generated with AuthKit: We observe if the user has signed into an account, and use the Firebase user ID as the alias ID for RevenueCat, so the user can be accurately tracked across different providers via InAppPurchases.associateUserWithID(USER_ID). We remove that alias when the user signes out by calling InAppPurchases.removeUserIDAssociation().
General Usage
The InAppPurchases object was designed to be used as an EnvironmentObject throughout the application and is attached to the root of the view hierarchy in App.swift. By default, we use the abbreviation iap for the environment object.

Here are some of the relevant InAppPurchases object parameters and functions that you can access:

Access Subscription State
InAppPurchases.swift
@Published public private(set) var subscriptionState: SubscriptionState = .notSubscribed
Can either be .notSubscribed or .subscribed. Updated automatically by the listenForSubscriptionStateChange() listener that is called during initialization.

Show Paywall Sheet
ShowPaywallSheetWhenCalledModifier.swift
static public func showPaywallSheet() { }
A static InAppPurchases function that will show the paywall sheet. The function sends a notification to the notification center while the view modifier placed in App.swift called ShowPaywallSheetWhenCalledModifier() listens to that notification and presents the paywall sheet.

Execute if User is Subscribed
InAppPurchases.swift
public func executeIfGotPremium(otherwise consequence: NoPremiumConsequence = .showPaywall, _ closure: () -> Void) { }
A function that that executes the provided closure if the user is subscribed. If the user is not subscribed, the consequence parameter will determine what happens next. (Will either show the paywall or show an in-app notification saying that the feature required premium). Read more in the Lock Actions behind Paywall section.

Show System Subscription Management Screen
InAppPurchases.swift
static public func showSubscriptionManagementScreen() async {}
A static InAppPurchases function that opens the system subscription management screen. Is shown on the InAppPurchases Settings Screen (when the user taps on "Manage Subscription").

Show View if User is Subscribed
requirePremium.swift
public func requirePremium(iap: InAppPurchases, onCancel: @escaping () -> Void) -> some View {}
A view modifier that allows you to lock views behind the paywall. If the user is subscribed, the view will be shown as usual, otherwise the paywall will be shown. Read more in the Lock Views behind Paywall section.

Module File Contents
Let's go through every file that is contained in the InAppPurchaseKit module:

Config
Contains the RevenueCat-Info.plist file that you will paste your RevenueCat API key into.

Resources
Contains the hero video placeholder that is shown by default on the first page in the carousel of the paywall

Sources
Model / InAppPurchases.swift
Contains the InAppPurchases observable class, which is the entry point to interact with the module.

ViewModifier / requirePremium.swift
Exposes the .requirePremium() view modifier that allows you to lock views behind the paywall. See Lock Views behind Paywall for more information.

ViewModifier / ShowPaywallSheetWhenCalledModifier.swift
Exposes the ShowPaywallSheetWhenCalledModifier() view modifier that listens for the showPaywallSheet() notification and presents the paywall sheet. Because we only use it in the root view in App.swift, we don't wrap it around a more general view modifier, and attach it via .modifier(ShowPaywallSheetWhenCalledModifier()).

Additionally, extends the InAppPurchases class with the showPaywallSheet() function that sends the notification.

View / InAppPurchaseView.swift
The paywall view that is shown when the user tries to access a feature that requires premium. You can customize this view to your liking, see Paywall for more information.

View / PremiumSettingsView.swift
View that can contains premium-related settings in the app. By default shows the "Manage Subscription" button that opens the system subscription management screen. See Premium Settings Screen for more information.

## InAppPurchaseKit Paywall (InAppPurchaseView)

Located in Sources/Views/InAppPurchaseView.swift, the InAppPurchaseView is the view that is shown when the user tries to access a feature that requires premium. You can customize this view to your liking.

Usage
The paywall is presented in the following scenarios:

When the user goes to settings and presses on Unlock Premium Features (opens the premium settings screen or the paywall to buy premium if the user is not subscribed)
When a user tries to perform an action that is wrapped in the executeIfGotPremium() function. See Lock Actions behind a Paywall.
When a user tries to access a view that is wrapped in the .requirePremium() view modifier. See Lock Views behind a Paywall.
When a sheet with the paywall is shown by calling the InAppPurchases.showPaywallSheet() function.
Customizing the Paywall
The view consists of an upper part, a carousel created in SwiftUI, which automatically scrolls through views that should sell the user the benefits of the premium plan.

The lower part of the view is created using RevenueCat's Paywall SDK and customized on the RevenueCat dashboard.

App Paywall

Upper Part (Carousel)
Here, we show a carousel of views that is stylized using common SwiftyLaunch components, such as the Hero View. You can customize the carousel as you desire directly in code.

Lower Part (Paywall Footer)
The RevenueCat Paywall Footer is less convenient to set up, but comes with a huge advantage over a hardcoded solution.

To modify it, you would have to go the RevenueCat dashboard and customize the paywall there. (As we did in the step-by-step guide)

Now, it's less convenient to have to leave Xcode to do that, but the advantage is that you can change the paywall without having to submit a new version of your app to the App Store. Neat!

Manually Showing the Paywall
As mentioned in the introduction above, we can also manually show the paywall by calling the InAppPurchases.showPaywallSheet() function.

We attach the ShowPaywallSheetWhenCalledModifier() view modifier to the root view in App.swift. This modifier then listens for the notification center notifications that would indiciate to present the paywall sheet if the user is not subscribed yet.

## Lock Actions behind a Paywall

Maybe you want to lock a specific feature behind a paywall in Swift. For this, SwiftyLaunch provides a couple of ways to do this.

By directly checking the subscription state
You can simply check if the user has premium access, by checking the subscriptionState variable of the InAppPurchases object.

import InAppPurchaseKit
import SharedKit
 
/// Will vibrate if the user is subscribed to the premium plan
func vibrateForPremiumUsers(iap: InAppPurchases) {
    if iap.subscriptionState == .subscribed {
        Haptics.notification(type: .success)
    }
}

InAppPurchases.swift
public class InAppPurchases: ObservableObject {
    @Published public private(set) var subscriptionState: SubscriptionState = .notSubscribed
}
Recommended: By calling the executeIfGotPremium() function
We recommend to use the executeIfGotPremium() function instead. Just pass whatever needs to be executed if the user got premium. If the user doesn't have premium, the function will present the user with the paywall.

import InAppPurchaseKit
import SharedKit
 
/// Will vibrate if the user is subscribed to the premium plan
func vibrateForPremiumUsers(iap: InAppPurchases) {
    iap.executeIfGotPremium {
        Haptics.notification(type: .success)
    }
}

The function signature is as follows:

InAppPurchases.swift
public class InAppPurchases: ObservableObject {
    public func executeIfGotPremium(
        otherwise consequence: NoPremiumConsequence = .showPaywall,
        _ closure: () -> Void
    ) { }
}
otherwise - (Optional) action to perform in case the user is not signed in. .showInAppNotification to show an in-app notification indication that the feature is behind the paywall or .showPaywall to directly show the paywall (Defaults to showPaywall).
closure - What to execute if the user has premium.
The function comes in two flavors: synchronous and asynchronous. The async version is available by just using await.

## Lock SwiftUI Views behind a Paywall

If you want to lock specific views behind a paywall in SwiftUI, we provide a special view modifier that allows you to do just that.

The .requirePremium() View Modifier
You can use the .requirePremium() view modifier to lock a view behind a paywall. Simple as that.

import SwiftUI
import InAppPurchaseKit
 
struct ContentView: View {
 
    @EnvironmentObject var iap: InAppPurchases
 
    var body: some View {
        // This view will only be shown if the user is the user has premium access
        // Otherwise, it will show a paywall
        Text("Premium Text")
            .requirePremium(iap: iap)
    }
}
View Modifier definition:

extension View {
    public func requirePremium(iap: InAppPurchases, onCancel: @escaping () -> Void = {}) -> some View {}
}
iap - The InAppPurchases object that is used to check if the user has premium access. Accessed through the @EnvironmentObject property wrapper.
onCancel - (Optional) action to perform when the user cancels the paywall.
Implementation Example
As an example to demonstrate the usage of the .requirePremium() view modifier, we have created a settings view that allows users to change their app icon, but only if they have premium access. It can be found in the Settings Tab → Appearance.

Example

AppearanceView.swift
import InAppPurchaseKit
 
struct AppearanceView: View {
 
    @EnvironmentObject var iap: InAppPurchases
 
    // Passed from parent to pop back to the root view in the navigation stack
    let popBackToRoot: () -> Void
 
     var body: some View {
        List {
            Section(header: Text("App Icon")) {
                // ...
            }
        }
        .navigationTitle("App Appearance")
        .requirePremium(iap: iap, onCancel: popBackToRoot)
     }
}
